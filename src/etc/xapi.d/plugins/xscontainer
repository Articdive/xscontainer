#!/usr/bin/env python

import XenAPI
import XenAPIPlugin
import sys
import xmlrpclib
# ToDo: hack for building on Fedora
sys.path.append('/usr/local/lib/python2.7/dist-packages/')
import xscontainer.ApiHelper as ApiHelper
import xscontainer.CoreOs as CoreOs
import xscontainer.Docker as Docker


def check_args(reqs, args):
    for req in reqs:
        if req not in args:
            raise Exception('INVALID_ARGUMENTS')


def prepare_output(output):
    return "True%s" % (output)


def install_vm(session, args):
    check_args(['url', 'sruuid'],  args)
    return prepare_output(CoreOs.install_vm(session,
                                            args['url'],
                                            args['sruuid']))


def create_config_drive(session, args):
    check_args(['vmuuid', 'sruuid', 'configuration'], args)
    configuration = args['configuration'].replace("%BR%", "\r\n")
    return prepare_output(CoreOs.create_config_drive(session,
                                                     args['vmuuid'],
                                                     args['sruuid'],
                                                     configuration))


def get_config_drive_default(session, args):
    check_args(['templateuuid'], args)
    return prepare_output(CoreOs.CLOUDCONFIG)


def get_config_drive_configuration(session, args):
    check_args(['vdiuuid'], args)
    return prepare_output(CoreOs.get_config_drive_configuration(session,
                                                                args['vdiuuid']
                                                                ))


def get_version(session, args):
    check_args(['vmuuid'], args)
    return prepare_output(Docker.get_version_xml(session, args['vmuuid']))


def get_info(session, args):
    check_args(['vmuuid'], args)
    return prepare_output(Docker.get_info_xml(session, args['vmuuid']))


def get_inspect(session, args):
    check_args(['vmuuid', 'object'], args)
    return prepare_output(Docker.get_inspect_xml(session, args['vmuuid'],
                                                 args['object']))


def start(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(Docker.start(session, args['vmuuid'],
                                       args['container']))


def stop(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(Docker.stop(session, args['vmuuid'],
                                      args['container']))


def restart(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(Docker.restart(session, args['vmuuid'],
                                         args['container']))


def pause(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(Docker.pause(session, args['vmuuid'],
                                       args['container']))


def unpause(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(Docker.unpause(session, args['vmuuid'],
                                         args['container']))


def passthrough(session, args):
    check_args(['vmuuid', 'command'], args)
    return prepare_output(Docker.passthrough(session, args['vmuuid'],
                                             args['command']))


def redirect_per_vm_operation_owned_by_other_slave(argv):
    params, methodname = xmlrpclib.loads(argv[1])
    session_id = params[0]
    session = XenAPI.xapi_local()
    session._session = session_id
    args = params[1]
    if 'vmuuid' in args:
        vmuuid = args['vmuuid']
        vmrecord = ApiHelper.get_vm_record_by_uuid(session, vmuuid)
        hostref = vmrecord['resident_on']
        if (hostref != 'OpaqueRef:NULL'
            and hostref != ApiHelper.get_this_host_ref(session)):
            # Redirect the call
            try:
                result = session.xenapi.host.call_plugin(
                    hostref, 'xscontainer', methodname, args)
                print XenAPIPlugin.success_message(result)
                sys.exit(0)
            except SystemExit:
                raise
            except Exception, e:
                print XenAPIPlugin.failure_message(['XENAPI_PLUGIN_FAILURE',
                                                    methodname, e.__class__.__name__, str(e)])
                sys.exit(1)

if __name__ == "__main__":
    redirect_per_vm_operation_owned_by_other_slave(sys.argv)

    # Now we can be certain that this message ought to be handled by this slave
    XenAPIPlugin.dispatch({
        'install_vm': install_vm,
        'create_config_drive': create_config_drive,
        'get_config_drive_default': get_config_drive_default,
        'get_config_drive_configuration': get_config_drive_configuration,
        'get_info': get_info,
        'get_version': get_version,
        'get_inspect': get_inspect,
        'start': start,
        'stop': stop,
        'restart': restart,
        'pause': pause,
        'unpause': unpause,
        'passthrough': passthrough, })
