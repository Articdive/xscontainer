#!/usr/bin/env python

import XenAPI
import XenAPIPlugin
import sys
import xmlrpclib
import os
# ToDo: hack for building on Fedora
sys.path.append('/usr/local/lib/python2.7/dist-packages/')
import xscontainer.api_helper as api_helper
import xscontainer.coreos as coreos
import xscontainer.docker as docker
import xscontainer.util.log as log

from xscontainer.docker_monitor import api as docker_monitor_api

ENABLE_DEV_CALLS_FILE = "/opt/xensource/packages/files/xscontainer/devmode_enabled"


def devmode_only(func):
    """
    Decorator method for returning an exception if 'dev mode' is not enabled
    in this plugin (global variable).
    """
    def decorated(*args, **kwargs):
        if not os.path.exists(ENABLE_DEV_CALLS_FILE):
            return "ERROR: This call is only enabled when in dev mode."
        return func(*args, **kwargs)
    return decorated

def check_args(reqs, args):
    for req in reqs:
        if req not in args:
            raise Exception('INVALID_ARGUMENTS')


def prepare_output(output):
    return "True%s" % (output)


@devmode_only
def install_vm(session, args):
    check_args(['url', 'sruuid'],  args)
    return prepare_output(coreos.install_vm(session,
                                            args['url'],
                                            args['sruuid']))


def create_config_drive(session, args):
    check_args(['vmuuid', 'sruuid', 'configuration'], args)
    configuration = args['configuration'].replace("%BR%", "\r\n")
    return prepare_output(coreos.create_config_drive(session,
                                                     args['vmuuid'],
                                                     args['sruuid'],
                                                     configuration))


def get_config_drive_default(session, args):
    check_args(['templateuuid'], args)
    return prepare_output(coreos.get_config_drive_default(session))


def get_config_drive_configuration(session, args):
    check_args(['vdiuuid'], args)
    return prepare_output(coreos.get_config_drive_configuration(session,
                                                                args['vdiuuid']
                                                                ))


def get_inspect(session, args):
    check_args(['vmuuid', 'object'], args)
    return prepare_output(docker.get_inspect_xml(session, args['vmuuid'],
                                                 args['object']))

def get_top(session, args):
    check_args(['vmuuid', 'object'], args)
    return prepare_output(docker.get_top_xml(session, args['vmuuid'],
                                             args['object']))

def register(session, args):
    check_args(['vmuuid'], args)
    return prepare_output(docker_monitor_api.register_vm(args['vmuuid'],
                                                         session))


def deregister(session, args):
    check_args(['vmuuid'], args)
    return prepare_output(docker_monitor_api.deregister_vm(args['vmuuid'],
                                                           session))


def start(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(docker.start(session, args['vmuuid'],
                                       args['container']))


def stop(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(docker.stop(session, args['vmuuid'],
                                      args['container']))


def restart(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(docker.restart(session, args['vmuuid'],
                                         args['container']))


def pause(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(docker.pause(session, args['vmuuid'],
                                       args['container']))


def unpause(session, args):
    check_args(['vmuuid', 'container'], args)
    return prepare_output(docker.unpause(session, args['vmuuid'],
                                         args['container']))

@devmode_only
def passthrough(session, args):
    check_args(['vmuuid', 'command'], args)
    return prepare_output(docker.passthrough(session, args['vmuuid'],
                                             args['command']))


def redirect_per_vm_operation_owned_by_other_slave(argv):
    params, methodname = xmlrpclib.loads(argv[1])
    session_id = params[0]
    session = XenAPI.xapi_local()
    session._session = session_id
    args = params[1]
    if 'vmuuid' in args:
        vmuuid = args['vmuuid']
        vmrecord = api_helper.get_vm_record_by_uuid(session, vmuuid)
        this_hostref = api_helper.get_this_host_ref(session)
        hostref = vmrecord['resident_on']
        if (hostref != api_helper.NULLREF
            and hostref != this_hostref):
            # Redirect the call
            try:
                log.info("Forwarding request %s from %s to %s"
                         % (args, this_hostref, hostref))
                result = session.xenapi.host.call_plugin(
                    hostref, 'xscontainer', methodname, args)
                print XenAPIPlugin.success_message(result)
                sys.exit(0)
            except SystemExit:
                raise
            except Exception, e:
                print XenAPIPlugin.failure_message(['XENAPI_PLUGIN_FAILURE',
                                                    methodname, e.__class__.__name__, str(e)])
                sys.exit(1)

if __name__ == "__main__":
    redirect_per_vm_operation_owned_by_other_slave(sys.argv)

    # Now we can be certain that this message ought to be handled by this slave
    XenAPIPlugin.dispatch({
        'install_vm': install_vm,
        'create_config_drive': create_config_drive,
        'get_config_drive_default': get_config_drive_default,
        'get_config_drive_configuration': get_config_drive_configuration,
        'get_inspect': get_inspect,
        'get_top': get_top,
        'register': register,
        'deregister': deregister,
        'start': start,
        'stop': stop,
        'restart': restart,
        'pause': pause,
        'unpause': unpause,
        'passthrough': passthrough, })
