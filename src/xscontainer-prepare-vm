#!/usr/bin/env python

import sys
# @todo: Hack for building outside the build system
sys.path.append('/usr/local/lib/python2.7/dist-packages/')
import xscontainer.api_helper as api_helper
import xscontainer.docker as docker
import xscontainer.util as util
import xscontainer.util.log as log

from xscontainer.docker_monitor import api as docker_monitor_api


import optparse
import subprocess


def check_parameters(parser, options, parameters):
    error = False
    for parameter in parameters:
        if not getattr(options, parameter):
            print('Error: Missing parameter --%s' % (parameter))
            error = True
    if error:
        print('')
        parser.print_help()
        sys.exit(1)


def determine_error_cause(session, vmuuid):
    cause = ""
    try:
        api_helper.execute_ssh(session, vmuuid, ['echo', 'hello world'])
    except util.XSContainerException:
        cause = (cause + "Can't connect at all with the ssh key. Please check" +
                 " the logs inside the VM.\n")
        return cause
    try:
        api_helper.execute_ssh(session, vmuuid, ['command -v socat || ' +
                                                 'command -v ncat'])
    except util.XSContainerException:
        cause = (cause + "Can't find either socat or ncat in the VM. Please " +
                 "install socat or ncat.\n")
    dockersocket = "/var/run/docker.sock"
    try:
        api_helper.execute_ssh(session, vmuuid, ['test', '-S', dockersocket])
    except util.XSContainerException:
        cause = (cause + "Can't find the docker's unix socket at %s."
                         % (dockersocket) +
                         " Please install and run Docker.\n")
    try:
        api_helper.execute_ssh(session, vmuuid, ['test -r "%s" && test -w "%s" '
                                                 % (dockersocket, dockersocket)
                                                 ])
    except util.XSContainerException:
        cause = (cause + "Can't access docker's unix socket. Please add the " +
                         " user to the docker group to provide access.\n")
    if cause == "":
        cause = "Can't determine the root cause for why it's not working.\n"
    return cause


def ask_yes_or_no():
    while True:
        print("Do you want to proceed? y/n")
        choice = raw_input().lower()
        if choice == 'y':
            return True
        elif choice == 'n':
            return False


def main(argv=None):
    parser = optparse.OptionParser()
    parser.add_option("-v", "--vmuuid", dest="vmuuid", help="UUID of the VM")
    parser.add_option("-u", "--username", dest="username",
                      help="Username which should be used on the VM for" +
                           " enlightenment")
    options = parser.parse_args()[0]
    check_parameters(parser, options, ['vmuuid', 'username'])
    vmuuid = options.vmuuid
    username = options.username
    print("This will register a public SSH key in the "
          + "~/.ssh/authorized_keys-file of the specified VM and user, to "
          + "allow XS to interact with the containers inside the VM")
    if not ask_yes_or_no():
        return 1
    session = None
    try:
        session = api_helper.get_local_api_session()
        try:
            host = api_helper.get_suitable_vm_ip(session, vmuuid)
        except util.XSContainerException:
            print("Error: Could not make a valid connection to the VM.")
            print("Please make sure that there is a SSH server running " +
                  "inside the VM that is reachable from Dom0")
            return 1
        docker_monitor_api.deregister_vm(vmuuid)
        api_helper.set_vm_xscontainer_username(session, vmuuid, username)
        api_helper.ensure_idrsa(session)
        print('Attempting to push the public xscontainer key to %s@%s'
              % (options.username, host))
        key = api_helper.get_idrsa_secret_public(session)
        # The following command is derived from OpenSSH-Client's ssh-copy-id
        cmd = ['/usr/bin/ssh', '%s@%s' % (username, host),
               "umask 077; test -d ~/.ssh || mkdir ~/.ssh ; grep '%s'"
               % key
               + " ~/.ssh/authorized_keys >/dev/null 2>&1 || echo '%s'"
               % key
               + " >> ~/.ssh/authorized_keys && ((test -x /sbin/restorecon && "
               + "/sbin/restorecon ~/.ssh ~/.ssh/authorized_keys "
               + ">/dev/null 2>&1) || true)"]
        process = subprocess.Popen(cmd)
        process.communicate()
        if process.returncode == 0:
            print('Success')
        else:
            print('Error: Failed to push the public xscontainer key to %s@%s')
            return 1
        print('Attempting to refresh the state of the VM')
        try:
            vmref = api_helper.get_vm_ref_by_uuid(session, vmuuid)
            docker.update_docker_version(session, vmuuid, vmref)
            print("Success.")
            print("Registering the VM for monitoring.")
            docker_monitor_api.register_vm(vmuuid)
        except util.XSContainerException:
            cause = determine_error_cause(session, vmuuid)
            print("Error: %s" % (cause))
            log.exception("Could not monitor vm %s via %s@%s due to: %s"
                          % (vmuuid, username, host, cause))
            return 1
    finally:
        if session != None:
            session.xenapi.session.logout()
    print "All Done."
    return 0


if __name__ == "__main__":
    sys.exit(main())
